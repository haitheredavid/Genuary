#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToUVSphereKernel
#pragma kernel WaveToUVSphereRippleKernel
#pragma kernel WaveToUVSphereTwistKernel
#pragma kernel WaveToTorusKernel

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToUVSphereKernel
#pragma kernel MultiWaveToUVSphereRippleKernel
#pragma kernel MultiWaveToUVSphereTwistKernel
#pragma kernel MultiWaveToTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToUVSphereKernel
#pragma kernel RippleToUVSphereRippleKernel
#pragma kernel RippleToUVSphereTwistKernel
#pragma kernel RippleToTorusKernel

#pragma kernel UVSphereToWaveKernel
#pragma kernel UVSphereToMultiWaveKernel
#pragma kernel UVSphereToRippleKernel
#pragma kernel UVSphereKernel
#pragma kernel UVSphereToUVSphereRippleKernel
#pragma kernel UVSphereToUVSphereTwistKernel
#pragma kernel UVSphereToTorusKernel

#pragma kernel UVSphereRippleToWaveKernel
#pragma kernel UVSphereRippleToMultiWaveKernel
#pragma kernel UVSphereRippleToRippleKernel
#pragma kernel UVSphereRippleToUVSphereKernel
#pragma kernel UVSphereRippleKernel
#pragma kernel UVSphereRippleToUVSphereTwistKernel
#pragma kernel UVSphereRippleToTorusKernel

#pragma kernel UVSphereTwistToWaveKernel
#pragma kernel UVSphereTwistToMultiWaveKernel
#pragma kernel UVSphereTwistToRippleKernel
#pragma kernel UVSphereTwistToUVSphereKernel
#pragma kernel UVSphereTwistToUVSphereRippleKernel
#pragma kernel UVSphereTwistKernel
#pragma kernel UVSphereTwistToTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToMultiWaveKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToUVSphereKernel
#pragma kernel TorusToUVSphereRippleKernel
#pragma kernel TorusToUVSphereTwistKernel
#pragma kernel TorusKernel

RWStructuredBuffer<float3> _Positions;
uint                       _Resolution;

float _Step, _Time, _TransitionProgress;

#define PI 3.14159265358979323846


float3 Wave(float u, float v, float t)
{
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

float3 MultiWave(float u, float v, float t)
{
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + 0.5 * t));
	p.y += 0.5 * sin(2.0 * PI * (v + t));
	p.y += sin(PI * (u + v + 0.25 * t));
	p.y *= 1.0 / 2.5;
	p.z = v;
	return p;
}


float3 Ripple(float u, float v, float t)
{
	float  d = sqrt(u * u + v * v);
	float3 p;
	p.x = u;
	p.y = sin(PI * (4.0 * d - t));
	p.y /= 1.0 + 10.0 * d;
	p.z = v;
	return p;
}

float3 UVSphere(float u, float v, float t)
{
	float  r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
	float  s = r * cos(0.5 * PI * v);
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 UVSphereRipple(float u, float v, float t)
{
	float  r = 0.9 + 0.1 * sin(PI * (8.0 * v + t));
	float  s = r * cos(0.5 * PI * v);
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(PI * 0.5 * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 UVSphereTwist(float u, float v, float t)
{
	float  r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t));
	float  s = r * cos(0.5 * PI * v);
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(PI * 0.5 * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 Torus(float u, float v, float t)
{
	float  r1 = 0.7 + 0.1 * sin(PI * (8.0 * u + 0.5 * t));
	float  r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));
	float  s = r2 * cos(PI * v) + r1;
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r2 * sin(PI * v);
	p.z = s * cos(PI * u);
	return p;
}

float2 GetUV(uint3 id)
{
	return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
	if (id.x < _Resolution && id.y < _Resolution)
	{
		_Positions[id.x + id.y * _Resolution] = position;
	}
}

#define KERNEL_FUNCTION(function) \
	[numthreads(8,8,1)] \
	void function##Kernel(uint3 id: SV_DispatchThreadID) { \
		float2 uv = GetUV(id);\
		SetPosition(id,function(uv.x, uv.y, _Time));\
}

#define KERNEL_MORPH_FUNCTION(functionA, functionB) \
	[numthreads(8,8,1)] \
	void functionA##To##functionB##Kernel(uint3 id: SV_DispatchThreadID) { \
		float2 uv = GetUV(id);\
		float3 position = lerp( \
			functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time),\
			_TransitionProgress);\
		SetPosition(id,position);\
}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(UVSphere)
KERNEL_FUNCTION(UVSphereRipple)
KERNEL_FUNCTION(UVSphereTwist)
KERNEL_FUNCTION(Torus)

KERNEL_MORPH_FUNCTION(Wave, MultiWave);
KERNEL_MORPH_FUNCTION(Wave, Ripple);
KERNEL_MORPH_FUNCTION(Wave, UVSphere);
KERNEL_MORPH_FUNCTION(Wave, UVSphereRipple);
KERNEL_MORPH_FUNCTION(Wave, UVSphereTwist);
KERNEL_MORPH_FUNCTION(Wave, Torus);

KERNEL_MORPH_FUNCTION(MultiWave, Wave);
KERNEL_MORPH_FUNCTION(MultiWave, Ripple);
KERNEL_MORPH_FUNCTION(MultiWave, UVSphere);
KERNEL_MORPH_FUNCTION(MultiWave, UVSphereRipple);
KERNEL_MORPH_FUNCTION(MultiWave, UVSphereTwist);
KERNEL_MORPH_FUNCTION(MultiWave, Torus);

KERNEL_MORPH_FUNCTION(Ripple, Wave);
KERNEL_MORPH_FUNCTION(Ripple, MultiWave);
KERNEL_MORPH_FUNCTION(Ripple, UVSphere);
KERNEL_MORPH_FUNCTION(Ripple, UVSphereRipple);
KERNEL_MORPH_FUNCTION(Ripple, UVSphereTwist);
KERNEL_MORPH_FUNCTION(Ripple, Torus);

KERNEL_MORPH_FUNCTION(UVSphere, Wave);
KERNEL_MORPH_FUNCTION(UVSphere, MultiWave);
KERNEL_MORPH_FUNCTION(UVSphere, Ripple);
KERNEL_MORPH_FUNCTION(UVSphere, UVSphereRipple);
KERNEL_MORPH_FUNCTION(UVSphere, UVSphereTwist);
KERNEL_MORPH_FUNCTION(UVSphere, Torus);

KERNEL_MORPH_FUNCTION(UVSphereRipple, Wave);
KERNEL_MORPH_FUNCTION(UVSphereRipple, MultiWave);
KERNEL_MORPH_FUNCTION(UVSphereRipple, Ripple);
KERNEL_MORPH_FUNCTION(UVSphereRipple, UVSphere);
KERNEL_MORPH_FUNCTION(UVSphereRipple, UVSphereTwist);
KERNEL_MORPH_FUNCTION(UVSphereRipple, Torus);

KERNEL_MORPH_FUNCTION(UVSphereTwist, Wave);
KERNEL_MORPH_FUNCTION(UVSphereTwist, MultiWave);
KERNEL_MORPH_FUNCTION(UVSphereTwist, Ripple);
KERNEL_MORPH_FUNCTION(UVSphereTwist, UVSphere);
KERNEL_MORPH_FUNCTION(UVSphereTwist, UVSphereRipple);
KERNEL_MORPH_FUNCTION(UVSphereTwist, Torus);

KERNEL_MORPH_FUNCTION(Torus, Wave);
KERNEL_MORPH_FUNCTION(Torus, MultiWave);
KERNEL_MORPH_FUNCTION(Torus, Ripple);
KERNEL_MORPH_FUNCTION(Torus, UVSphere);
KERNEL_MORPH_FUNCTION(Torus, UVSphereRipple);
KERNEL_MORPH_FUNCTION(Torus, UVSphereTwist);
